[{"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\index.tsx":"1","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\reportWebVitals.ts":"2","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\App.tsx":"3","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\FormOrder.tsx":"4","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\Header.tsx":"5","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\MyMap.tsx":"6","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\rootReducer.ts":"7","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\mapReducer.ts":"8","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\actions.ts":"9","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\types.ts":"10","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\utilities.js":"11","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\crewReducer.ts":"12","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\crew.js":"13","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\driverCard.tsx":"14","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\orderReducer.ts":"15"},{"size":873,"mtime":1610891877917,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":3620,"mtime":1610953427868,"results":"19","hashOfConfig":"17"},{"size":3642,"mtime":1610944567167,"results":"20","hashOfConfig":"17"},{"size":1020,"mtime":1610944567302,"results":"21","hashOfConfig":"17"},{"size":3105,"mtime":1610951871500,"results":"22","hashOfConfig":"17"},{"size":285,"mtime":1610944567261,"results":"23","hashOfConfig":"17"},{"size":1379,"mtime":1610860789809,"results":"24","hashOfConfig":"17"},{"size":4286,"mtime":1610954016728,"results":"25","hashOfConfig":"17"},{"size":344,"mtime":1610944567321,"results":"26","hashOfConfig":"17"},{"size":885,"mtime":1610953998165,"results":"27","hashOfConfig":"17"},{"size":273,"mtime":1610944567102,"results":"28","hashOfConfig":"17"},{"size":2254,"mtime":1610909615159,"results":"29","hashOfConfig":"17"},{"size":1004,"mtime":1610892788779,"results":"30","hashOfConfig":"17"},{"size":276,"mtime":1610944567277,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ydbse8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\index.tsx",[],["66","67"],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\reportWebVitals.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\App.tsx",["68"],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\FormOrder.tsx",["69","70"],"import React, {useState} from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport {checkAddress, getCrew, reverseGeocoding, setAddress, setPosition, toggleGeocode} from \"../redux/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUniqueKey} from \"../utilities\";\r\n\r\n\r\nconst FormOrder: React.FC = (props) => {\r\n// @ts-ignore\r\n    const {isError, errorText, house, street, isReverseGeocode, setGeocode, getAddresses, suggestions, setPosition, setNewAddress, getDriver, drivers} = props\r\n    const [address, setAddress] = useState<string>('')\r\n    const [isShowPrompt, setIsShowPrompt] = useState<boolean>(false)\r\n\r\n    const setAddressHandler = (addressObj:any) => {\r\n        const {address, position} = addressObj\r\n        setAddress(address.street + ', ' + address.houseNumber)\r\n        setNewAddress(address.street, address.houseNumber)\r\n        setPosition({lat: position.lat, lon: position.lng})\r\n        getDriver(position.lat, position.lng)\r\n        setGeocode(true)\r\n    }\r\n\r\n    const changeAddressHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setAddress(event.target.value)\r\n        getAddresses(event.target.value)\r\n    }\r\n\r\n    const changeGeocodeDirection = () => {\r\n        setIsShowPrompt(true)\r\n        if(isReverseGeocode) {\r\n            setGeocode(false)\r\n            setAddress(street+', '+ house)\r\n        }\r\n    }\r\n\r\n    // const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    //     if (event.key === 'Enter') {\r\n    //         event.preventDefault();\r\n    //         console.log(address)\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Group className='position-relative' controlId=\"formBasicEmail\">\r\n                <Form.Label>Откуда</Form.Label>\r\n                <Form.Control\r\n                    onChange={changeAddressHandler}\r\n                    onFocus={changeGeocodeDirection}\r\n                    onMouseOut={()=> {\r\n                        setTimeout(()=>setIsShowPrompt(false), 100)\r\n                    }}\r\n                    value={isReverseGeocode? street+', '+ house : address}\r\n                    type=\"text\"\r\n                    placeholder=\"Улица, дом\"\r\n                    autoComplete=\"off\"\r\n                    // id=\"address\"\r\n                    // onKeyPress={keyPressHandler}\r\n                />\r\n                {/* @ts-ignore*/}\r\n                {isShowPrompt && suggestions.map(i => {\r\n                    return (\r\n                        <div onClick={()=>setAddressHandler(i)}\r\n                            key={getUniqueKey()} className='bg-transparent position-absolute w-100 bg-light text-secondary border-bottom'>{\r\n                            i.address.street + ', ' + i.address.houseNumber\r\n                        }</div>)})}\r\n                <Form.Text className=\"text-muted\">\r\n                    <div className=\"w-100 text-right\">\r\n                        {isError ? <span className=\"badge-warning\">{errorText}</span> :\r\n                            isShowPrompt && suggestions.length && address ?\r\n                                <span>&nbsp;</span> : isReverseGeocode?'':'адрес не найден'\r\n                        }\r\n                    </div>\r\n                </Form.Text>\r\n            </Form.Group>\r\n        </Form>\r\n    )}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        isError: state.map.address.error.status,\r\n        errorText: state.map.address.error.text,\r\n        street: state.map.address.street,\r\n        house: state.map.address.houseNumber,\r\n        isReverseGeocode: state.map.settings.isReverseGeocode,\r\n        suggestions: state.map.suggestions,\r\n        drivers: state.crew\r\n        // latitude: state.map.position.lat,\r\n        // longitude: state.map.position.lon,\r\n        // zoom: state.map.settings.zoom\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setPosition,\r\n    setNewAddress: setAddress,\r\n    getDriver: getCrew,\r\n    // getAddress: reverseGeocoding,\r\n    getAddresses: checkAddress,\r\n    setGeocode: toggleGeocode,\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormOrder)\r\n","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\Header.tsx",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\MyMap.tsx",["71","72","73","74"],"import React, {useState} from 'react';\r\nimport {YMaps, Map, Placemark} from 'react-yandex-maps';\r\nimport {connect} from \"react-redux\";\r\nimport {reverseGeocoding, setPosition} from \"../redux/actions\";\r\n\r\nimport car from '../car.png'\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport {getUniqueKey} from \"../utilities\";\r\nimport logo from \"../logo.png\";\r\n\r\n\r\nconst MyMap:React.FC = (props) => {\r\n    const [isMarked, setIsMarked] = useState<boolean>(true)\r\n// @ts-ignore\r\n    const {latitude, longitude, zoom, setPosition, getAddress, drivers} = props\r\n\r\n    const driverPoints = () => {\r\n        if (drivers?.length) {\r\n            return (\r\n                drivers.map((i: { car_mark: string; car_model: string; car_color: string;\r\n                car_number: string; lat: number; lon: number; }, index:number) => {\r\n                    let text = i.car_mark +' '+ i.car_model + ' ' + i.car_color + ' ' + i.car_number\r\n                        return <Placemark key={getUniqueKey()} geometry={[i.lat, i.lon]}\r\n                                   properties={{\r\n                                       balloonContentBody: text,\r\n                                   }}\r\n                                   options={{\r\n                                       preset:'islands#darkGreenDotIcon',\r\n                                       iconColor: '#0dd238'\r\n                                   }}\r\n                        />\r\n                    }\r\n                        ))}}\r\n\r\n    function getCoordsHandler(e: any) {\r\n        const coords = e.get(\"coords\")\r\n        console.log(coords[0], coords[1])\r\n        setIsMarked(false)\r\n        e.get(\"target\").panTo(coords)\r\n        getAddress(coords[0], coords[1])\r\n        setIsMarked(true)\r\n    }\r\n\r\n    return (\r\n        <YMaps\r\n            query={{\r\n                ns: 'use-load-option', load:\r\n                    'Map,Placemark,control.ZoomControl,control.FullscreenControl,geoObject.addon.balloon',\r\n            }}>\r\n            <Map width=\"100%\"\r\n                 state={{\r\n                     center: [latitude, longitude],\r\n                     zoom,\r\n                     controls: ['zoomControl', 'fullscreenControl']\r\n                 }}\r\n                 onClick={getCoordsHandler}\r\n            >{isMarked &&\r\n            <Placemark geometry={[latitude, longitude]}\r\n                       properties={{\r\n                           balloonContentBody:\r\n                               'Место подачи такси',\r\n                       }}\r\n                       options={{\r\n                           iconColor: '#F7D600'\r\n                       }}\r\n            />}\r\n                {drivers && driverPoints()}\r\n            </Map>\r\n        </YMaps>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        latitude: state.map.position.lat,\r\n        longitude: state.map.position.lon,\r\n        zoom: state.map.settings.zoom,\r\n        drivers: state.crew\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setPosition,\r\n    getAddress: reverseGeocoding\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyMap)\r\n","C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\rootReducer.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\mapReducer.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\actions.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\types.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\utilities.js",[],["75","76"],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\crewReducer.ts",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\crew.js",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\components\\driverCard.tsx",[],"C:\\Users\\ASUS\\Documents\\projects\\taxi\\src\\redux\\orderReducer.ts",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":16,"column":21,"nodeType":"83","messageId":"84","endLine":16,"endColumn":30},{"ruleId":"81","severity":1,"message":"85","line":3,"column":32,"nodeType":"83","messageId":"84","endLine":3,"endColumn":48},{"ruleId":"81","severity":1,"message":"86","line":10,"column":143,"nodeType":"83","messageId":"84","endLine":10,"endColumn":150},{"ruleId":"81","severity":1,"message":"87","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":11},{"ruleId":"81","severity":1,"message":"88","line":7,"column":9,"nodeType":"83","messageId":"84","endLine":7,"endColumn":12},{"ruleId":"81","severity":1,"message":"89","line":7,"column":14,"nodeType":"83","messageId":"84","endLine":7,"endColumn":17},{"ruleId":"81","severity":1,"message":"90","line":9,"column":8,"nodeType":"83","messageId":"84","endLine":9,"endColumn":12},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'errorText' is assigned a value but never used.","Identifier","unusedVar","'reverseGeocoding' is defined but never used.","'drivers' is assigned a value but never used.","'car' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]